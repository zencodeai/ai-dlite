/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : Ontology.g
 *     -                            On : 2010-08-01 19:38:28
 *     -                for the parser : OntologyParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser OntologyParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pOntologyParser, which is returned from a call to OntologyParserNew().
 *
 * The methods in pOntologyParser are  as follows:
 *
 *  - void      pOntologyParser->eval(pOntologyParser)
 *  - void      pOntologyParser->s_ontology(pOntologyParser)
 *  - void      pOntologyParser->s_header(pOntologyParser)
 *  - void      pOntologyParser->lit_name(pOntologyParser)
 *  - void      pOntologyParser->lit_version(pOntologyParser)
 *  - void      pOntologyParser->s_attribute(pOntologyParser)
 *  - void      pOntologyParser->s_include(pOntologyParser)
 *  - void      pOntologyParser->ns_begin(pOntologyParser)
 *  - void      pOntologyParser->ns_end(pOntologyParser)
 *  - void      pOntologyParser->s_bloc(pOntologyParser)
 *  - void      pOntologyParser->s_definition(pOntologyParser)
 *  - void      pOntologyParser->s_expr(pOntologyParser)
 *  - void      pOntologyParser->op_or(pOntologyParser)
 *  - void      pOntologyParser->op_and(pOntologyParser)
 *  - void      pOntologyParser->op_top(pOntologyParser)
 *  - void      pOntologyParser->op_bottom(pOntologyParser)
 *  - void      pOntologyParser->op_cond(pOntologyParser)
 *  - void      pOntologyParser->op_atom(pOntologyParser)
 *  - void      pOntologyParser->op_univ(pOntologyParser)
 *  - void      pOntologyParser->op_exist(pOntologyParser)
 *  - void      pOntologyParser->op_maxcard(pOntologyParser)
 *  - void      pOntologyParser->op_mincard(pOntologyParser)
 *  - void      pOntologyParser->op_constraint(pOntologyParser)
 *  - void      pOntologyParser->op_not(pOntologyParser)
 *  - void      pOntologyParser->lit_value(pOntologyParser)
 *  - void      pOntologyParser->lit_list(pOntologyParser)
 *  - void      pOntologyParser->op_in(pOntologyParser)
 *  - void      pOntologyParser->lit_listitem(pOntologyParser)
 *  - void      pOntologyParser->s_concept(pOntologyParser)
 *  - void      pOntologyParser->s_def(pOntologyParser)
 *  - void      pOntologyParser->lit_constant(pOntologyParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_OntologyParser_H
#define _OntologyParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct OntologyParser_Ctx_struct OntologyParser, * pOntologyParser;



#include <antlr3.h>
#include "dltools.h"
#include "context.h"

using namespace DLITE;


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for OntologyParser
 */
struct OntologyParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     void (*eval)	(struct OntologyParser_Ctx_struct * ctx);
     void (*s_ontology)	(struct OntologyParser_Ctx_struct * ctx);
     void (*s_header)	(struct OntologyParser_Ctx_struct * ctx);
     void (*lit_name)	(struct OntologyParser_Ctx_struct * ctx);
     void (*lit_version)	(struct OntologyParser_Ctx_struct * ctx);
     void (*s_attribute)	(struct OntologyParser_Ctx_struct * ctx);
     void (*s_include)	(struct OntologyParser_Ctx_struct * ctx);
     void (*ns_begin)	(struct OntologyParser_Ctx_struct * ctx);
     void (*ns_end)	(struct OntologyParser_Ctx_struct * ctx);
     void (*s_bloc)	(struct OntologyParser_Ctx_struct * ctx);
     void (*s_definition)	(struct OntologyParser_Ctx_struct * ctx);
     void (*s_expr)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_or)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_and)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_top)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_bottom)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_cond)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_atom)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_univ)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_exist)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_maxcard)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_mincard)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_constraint)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_not)	(struct OntologyParser_Ctx_struct * ctx);
     void (*lit_value)	(struct OntologyParser_Ctx_struct * ctx);
     void (*lit_list)	(struct OntologyParser_Ctx_struct * ctx);
     void (*op_in)	(struct OntologyParser_Ctx_struct * ctx);
     void (*lit_listitem)	(struct OntologyParser_Ctx_struct * ctx);
     void (*s_concept)	(struct OntologyParser_Ctx_struct * ctx);
     void (*s_def)	(struct OntologyParser_Ctx_struct * ctx);
     void (*lit_constant)	(struct OntologyParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct OntologyParser_Ctx_struct * ctx);
        

        sptContext m_spContext;

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pOntologyParser OntologyParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pOntologyParser OntologyParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T_OP_LEQ      29
#define T_VAL_INT      34
#define F_ID      10
#define T_OP_GEQ      28
#define T_SY_BOTTOM      19
#define T_KW_NSEND      13
#define T_S_RSB      53
#define T_SY_COND      20
#define T_OP_AND      17
#define T_KW_IN      39
#define EOF      -1
#define T_KW_NSBEGIN      12
#define T_KW_ATTRIBUTE      9
#define T_BCOMMENT      47
#define T_SY_NAME      14
#define T_S_LP      40
#define F_ALPHA      43
#define T_VAL_STRING      5
#define T_VAL_HINT      50
#define T_OP_NOT      32
#define T_WS      46
#define F_DIGIT      44
#define T_S_COL      54
#define T_OP_OR      16
#define T_S_COM      37
#define T_KW_VERSION      7
#define T_S_SLS      22
#define T_OP_INC      51
#define T_S_LB      36
#define T_SY_VARIABLE      33
#define T_LCOMMENT      48
#define T_OP_L      24
#define T_OP_UNIV      21
#define T_OP_G      26
#define F_HEXDIGIT      45
#define T_S_RB      38
#define T_OP_DEF      15
#define T_VAL_UINT      25
#define T_VAL_FLOAT      35
#define T_S_RP      41
#define T_S_LSB      52
#define T_VAL_VERSION      8
#define T_KW_DEF      42
#define T_OP_EXIST      23
#define T_KW_ALIAS      49
#define T_KW_NAME      4
#define T_OP_EQ      30
#define T_KW_INCLUDE      11
#define T_SY_ATTRIBUTE      27
#define T_SY_TOP      18
#define T_S_SEMI      6
#define T_OP_NEQ      31
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for OntologyParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
